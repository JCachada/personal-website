<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[J. Cachada Personal Website]]></title><description><![CDATA[A personal website for all of my j.cachada needs.]]></description><link>https://jcachada.dev</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 04 May 2020 21:03:50 GMT</lastBuildDate><item><title><![CDATA[Dev Diaries #1: Finding a Gameplay Loop]]></title><description><![CDATA[I understand stories better than I understand game design. That’s the crux of current problem with developing my game. I know precisely what…]]></description><link>https://jcachada.dev/finding-a-gameplay-loop/</link><guid isPermaLink="false">https://jcachada.dev/finding-a-gameplay-loop/</guid><pubDate>Sat, 02 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I understand stories better than I understand game design.&lt;/p&gt;
&lt;p&gt;That’s the crux of current problem with developing my game. I know precisely what story I want to tell and what themes I want to approach - but any game must have a somewhat defined recurring gameplay loop which makes up for the bulk of the player’s experience. Coming up with that central gameplay loop is harder than it sounds, at least for me. In this post I’ll attempt to make clear what my thought process is on this matter, and why I don’t just slap some gameplay onto the game. I will also attempt to make this post into a decision log of sorts, where I lay out the options I’ve identified so far and their respective pros and cons. Hopefully this process will introduce some clarity, or at the very least it will serve as an historical document.&lt;/p&gt;
&lt;h2&gt;What to aim for&lt;/h2&gt;
&lt;p&gt;First of all, the central gameplay loop must be enjoyable. This might seem like a very obvious thing to say, but I think it’s important that this is the first consideration. Above all, players must like playing the game. I have often seen games put their intended message and artistic merit above player enjoyment. Just recently I played a very interesting narrative driven game that was riddled with issues because it just wasn’t fun to play, even though the story was very engaging. While I can’t presume to know how the development process went for that particular game, I definitely felt like they made the game serve the story they wanted to tell, and came up with something that just wasn’t enjoyable to play; or at least, not for me.&lt;/p&gt;
&lt;p&gt;This isn’t to say gameplay can’t serve the narrative. Visual novels and walking simulators, for instance, are enjoyable to the audience they target, explicitly because the gameplay, simple as it may be, serves a particular purpose to enable the narrative and experience they want to provide.&lt;/p&gt;
&lt;p&gt;Which brings me to my second point: the gameplay must be coherent with the narrative themes, and ideally enhance them. At the very least, it shouldn’t directly contradict them. &lt;em&gt;Undertale&lt;/em&gt; would be a much worse game if, instead of a dodging game reminiscent of old SHMUP experiences, it had traditional 2D side scrolling combat. Ideally, the gameplay loop would directly tie into the narrative experience and enhance it: &lt;em&gt;Dark Souls&lt;/em&gt;, for instance, is a game for which a brutal, opressive combat system decidedly makes sense, and enhances the brutal, opressive atmosphere of a decaying world.&lt;/p&gt;
&lt;p&gt;The third point is a bit more controversial: it should be in some way new. That doesn’t mean coming up with some new way of interacting with the game entirely. New gameplay mechanics are hard to come by, and the returns on coming up with them are often diminished by the learning curve required with having to introduce players to new mechanics. Everyone can play a platformer: the collective cultural experience that everyone sort of has about video games makes a platformer very easy to understand. But that doesn’t mean you can’t improve on &lt;em&gt;Super Mario Brothers 2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is, of course, a more personal point. If my central focus is narrative, I could just pick an existing gameplay loop and implement the one that better served the narrative I want to tell. And I might still do just that - but if I do, I personally want to iterate on it in some way. Game development is not only a narrative process in artistic terms, but also a creative process in terms of the actual game aspect of it. I don’t think I’d be happy with my game if I didn’t try to improve upon whichever gameplay loop I end up choosing, even if it’s just a small incremental improvement. I strongly believe in iteration: even mechanics as simple as those found in walking simulators can be improved upon.&lt;/p&gt;
&lt;p&gt;So, to sum up, here’s what I’m looking for in terms of the main gameplay loop is:&lt;/p&gt;
 &lt;ol style=&quot;padding-left:30px&quot;&gt;
  &lt;li&gt;An enjoyable gameplay loop that...&lt;/li&gt;
  &lt;li&gt;... Does not directy contradict, and ideally enhances the narrative experience, while...&lt;/li&gt;
  &lt;li&gt;... Improving upon at least some of the existing implementations of similar gameplay loops. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With that in mind, let’s go through each gameplay loop I think is available to me and try to figure out some pros and cons for each one.&lt;/p&gt;
&lt;h2&gt;Card Game or Card / Puzzle Game Hybrid&lt;/h2&gt;
&lt;p&gt;Considering I was once a professional card game player, designing a card game would probably be my first instinct. It’s a subject I know very well, it’s something I can be reasonably creative in, while not feeling completely out of my depth. It’s also something that would not be tremendously hard to implement on the tech side. Like with sidescrolling combat, the hardest thing to implement would almost surely be enemy AI, but even then there are excellent resources available on how to implement card game enemy AI: &lt;em&gt;Prismata&lt;/em&gt;, for instance, has done excellent work on it.&lt;/p&gt;
&lt;p&gt;Of course, a card game is generally not suited to single-player narrative driven experiences, considering how dependent the genre is on stuff like evolving metas and deckbuilding capabilities. Fortunately, games like &lt;em&gt;Thronebreaker: The Witcher Tales&lt;/em&gt; have already introduced a puzzle / card game hybrid that maintains some of the best things about card games (the puzzles, trying to decide what the correct play at any given time is) that works well for single-player.&lt;/p&gt;
&lt;p&gt;I see two cons to this main gameplay loop. First of all is that it doesn’t seem to serve the narrative in any way. The game is broadly about corruption vs kindness, and how people react in desperate situations. To do it with a card game would imply finding a way to make the gameplay play to those themes. While possible, this isn’t immediately easy or obvious.&lt;/p&gt;
&lt;p&gt;The second con is the art expense. Card games in general have excellent art. &lt;em&gt;Magic The Gathering&lt;/em&gt;’s art is legendary, &lt;em&gt;Gwent&lt;/em&gt; had extremely high quality art, and in general the card game audience has very high expectations in what concerns the quality of their card art. This would make it hard to meet those expectations with my available funds: after all, top tier artists are expensive, a card game demands a very high quantity of good art, and this is an indie, hobby level project. The investment would not just be hard to justify, but hard to make happen in the first place.&lt;/p&gt;
&lt;h2&gt;Walking Simulator / Visual Novel&lt;/h2&gt;
&lt;p&gt;When one wants to make a game and call it narrative-driven, there is always the question of whether or not to make it limited in actual gameplay mechanics, and make it instead a visual novel or a walking simulator. Those games are, in fact, often associated with a heavier focus on narrative, because there are no other mechanics in it to compete with the story: the game lives and dies on its plot and characters. I include in this section games that have very limited gameplay mechanics, like &lt;em&gt;To The Moon&lt;/em&gt;, which I love.&lt;/p&gt;
&lt;p&gt;The biggest con for this type of approach is the “enjoyable” bullet point. A lot of people just don’t like visual novels. Walking simulators are a polarizing genre, with people often arguing they’re not even games. If I wanted to maximize the audience I can reach, perhaps walking simulators and visual novels needlessly restrict me from the getgo.&lt;/p&gt;
&lt;p&gt;That being said, I don’t think making decisions based on whether or not something is too niche is particularly productive, especially because I’m someone trying to develop a game I’m proud of, and not a mega-corporation trying to maximize profits. Because of that, the central question is just whether or not I’d be happy making a walking sim or a visual novel. They tend to be less challenging on the technical aspect than other games, and while I coded systems like saved games myself (instead of using engines like Ren’Py), I feel like I’d still have to find ways to challenge myself with new features and ways to iterate on the visual novel / walking sim formula to be happy with the end product.&lt;/p&gt;
&lt;h2&gt;Platformer&lt;/h2&gt;
&lt;p&gt;I don’t particularly enjoy platformers, so it’s easy for me to dismiss this option, as I want to work on something I’m personally engaged by. However, for the sake of the exercise, I’ll still go through the pros and cons.&lt;/p&gt;
&lt;p&gt;Platformers are easy to iterate on and there’s tons of stuff I could introduce to try and make the experience varied and unique. They also have a very large amount of data available on how to code different aspects, available from different games and their tutorials.&lt;/p&gt;
&lt;p&gt;On the con side, they’re probably the most overcrowded genre on the indie market right now. Everyone makes platformers, and lots of players aren’t willing to give yet another new platformer a try. They want something new. If I wanted to make a platformer, I’d have to find a differentiating factor, like &lt;em&gt;Ori and the Blind Forest&lt;/em&gt; did with its artstyle. But it would have to come from the mechanics side of it, as I would never have the budget to throw at the game to make it stand out on its art alone.&lt;/p&gt;
&lt;h2&gt;2D Roguelike Combat: Either Side-scrolling or Top-Down&lt;/h2&gt;
&lt;p&gt;This was my initial instinct when starting the development process. It just felt natural to me, and I feel like that comes from an inclination that I have from my playing experiences: that having bad guys you fight with several different tools is the basic gameplay loop mostly everyone is familiar with.&lt;/p&gt;
&lt;p&gt;There are some downsides, however. The technical aspect of coding combat can be seen as a boon and a challenge. It took me almost a month to code a basic enemy AI that just chases the player character around shooting stuff at him when it gets within a certain range. This is a very slow pace, and combat AI is something it’d take me a long time to learn and code, probably. I’ve looked into how games like Rimworld and Left 4 Dead 2 do their AIs, and there’s a lot to unpack there. But even though it might be biting off more than I can chew, I also can’t help but feel excited by it. It’s an interesting subject, and one I’d like to try and tackle.&lt;/p&gt;
&lt;p&gt;Perhaps the biggest downside besides that is the animation cost. Whereas other genres would have limited costs in terms of walking / jumping animations for the characters and then punctual cost for special animations as needed, a combat-heavy game would have exponentially higher cost: animations for every mob, their different moves, the player character’s different moves, potential new weapons… All of this would have to be purchased, or I’d have to learn to draw it myself. Either way this would mean a large increase in the development cost for the game.&lt;/p&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;So, now that I’ve listed the options… What comes next?&lt;/p&gt;
&lt;p&gt;For the next month, and until it is done, my priority will be the book I’ve been working on for the last year. That means that, when my time is limited and I have to choose, I’ll work on the book first, and only give the game my full attention when the book is done. The reason I say this is that I’m fully aware that I might not finish what I’m about to propose in time, and that’s okay.&lt;/p&gt;
&lt;p&gt;But the next steps will be building a Proof of Concept for each of the gamemodes above, and try and see how I’d implement them in a scene. In that scene, focus on how I’d try and answer some of the questions I asked myself here, like the questions about differentiation for some of the genres. With the working POCs in hand I’ll be able to make a more informed decision on which path to take for the entire game. Perhaps I’ll even find a compromise and use bits and pieces of them. Time will tell.&lt;/p&gt;
&lt;p&gt;But that’s the deliverable for the next dev diary: I’ll report back on how the development is going for the different POCs, with the forewarning that they’ll be on the back burner until I’m done with the book.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Book Update #1: First Drafting]]></title><description><![CDATA[I’ve written a lot of “books”, all of them absolute garbage and nothing I want to ever see the light of day.  Some of them were bad because…]]></description><link>https://jcachada.dev/book-update-may-2020/</link><guid isPermaLink="false">https://jcachada.dev/book-update-may-2020/</guid><pubDate>Sat, 02 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I’ve written a lot of “books”, all of them absolute garbage and nothing I want to ever see the light of day. &lt;/p&gt;
&lt;p&gt;Some of them were bad because I was too young to know any better. Some of them were bad because I hadn’t had enough practice to iron out some kinks in my writing. And some of them were bad because I didn’t work on them enough. Something which I’ve come to understand is that I’ve written a lot of books, but I haven’t finished a lot of them. That’s because I skipped one of the main steps: editing. &lt;/p&gt;
&lt;p&gt;Someone said once that editing is when you make it look like you knew what the hell you were doing when you wrote your first draft. I find that to be an accurate description. &lt;/p&gt;
&lt;p&gt;When I look back at all the stuff I’ve written before, I see a lot of potential in it, but no coherent solid body of work. That’s because I didn’t take the time to edit it appropriately, to gain some distance and then look on it and try to improve it with a bird’s eye view of the entire story. I sort of just went at it and wrote. &lt;/p&gt;
&lt;p&gt;That’s why with this book I’m expecting to take the rest of this year to call it “done”, even though I’m almost done with the first draft before the year reaches the halfway mark. I will then have to let it rest for a slight while, do an entire readthrough with a plot edit, then do some line editing and correct any typos or weird wordings, then send it out to beta readers and adjust according to feedback. Yes, that’s a formal outline of the steps the book will have to go through for me to consider it done. I expect to be done with all these steps this year still.&lt;/p&gt;
&lt;p&gt;In the meantime, a lot of the updates will simply illustrate how far along this path I am. Therefore, they’ll be quite short, unless I come up across some problem or subject I find interesting and want to talk about. &lt;/p&gt;
&lt;p&gt;Some of these stages will also imply a lower level of involvment on my end. When that happens, I’ll take the extra time to give some of my other projects attention, like my ongoing videogame. However, to make it perfectly clear, the book will always take priority, as it is my main goal for this year. I will only look at other stuff when my input is not needed on the book or when I have extra time remaining: for instance, when I’m waiting on beta reader feedback. &lt;/p&gt;
&lt;h2&gt;Current state of things&lt;/h2&gt;
&lt;p&gt;As it stands, I’m about 110.000 words in and working on the first draft of what I expect to be the last couple of chapters. I want to hopefully finish the first draft this month, although that might be a slightly ambitious goal. We’ll see.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Current word count&lt;/strong&gt;: 103.810 words
&lt;strong&gt;Current goal&lt;/strong&gt;: Finish first draft.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Mission Statement: This blog, the website, and more.]]></title><description><![CDATA[In 2013, I went to college. I didn’t really know what I wanted to go to college for, and I ended up choosing Philosophy as a major because I…]]></description><link>https://jcachada.dev/mission-statement/</link><guid isPermaLink="false">https://jcachada.dev/mission-statement/</guid><pubDate>Thu, 26 Mar 2020 18:57:03 GMT</pubDate><content:encoded>&lt;p&gt;In 2013, I went to college. I didn’t really know what I wanted to go to college for, and I ended up choosing Philosophy as a major because I thought it would give me a broad spectrum of skills and sort of postpone the actual decision of what I wanted to do with my life.&lt;/p&gt;
&lt;p&gt;Philosophy is a great major. I’m very grateful for the things that I learned during my time studying it, and I wish the state of humanities’ academia in Portugal wasn’t such that even the most skilled of students have no place at universities and aren’t particularly valued by the private sector. But that was the case, and I soon realized that I would have a very hard time finding a job related to my studies.&lt;/p&gt;
&lt;p&gt;I am not, however, someone who likes to wait idly for things to get better. So I tried to figure out how I could leverage my work and the things that I liked into a proper career. At first that meant getting a Master’s in American Literature and American Culture. I thought I could at least get a job as a translator while I looked for something better, and surely a Master’s degree completed with honors would mean something.&lt;/p&gt;
&lt;p&gt;But before I could give academia a real try, I realized what I was actually passionate about. In my Philosophy B.A., I specialized in Logics. In my Master’s, I gave special emphasis to American Literature. What do those have in common, and what do they have in common with what I ended up doing?&lt;/p&gt;
&lt;p&gt;The conclusion I came to was that what I really liked was stories; and that I wanted to do something related to them in some way, shape or faction. But I also found that working as a literature analyst was in a way oppressive. I missed seeing the real impact of the things I was doing, and it can be hard at times with literature to be sure what you do matters. &lt;/p&gt;
&lt;p&gt;That’s when I started coding.&lt;/p&gt;
&lt;p&gt;My skills in Logics, that I’d gotten during my BA, helped me a lot with getting into code. I did a bootcamp, I practiced a lot, and I found out that not only was I good at it and enjoyed the puzzle solving, as well as the fact that my code’s impact in the world was often clear and measurable, writing code was actually quite a bit like storytelling.&lt;/p&gt;
&lt;h2&gt;Coding as Storytelling&lt;/h2&gt;
&lt;p&gt;As I wrote and, especially, read more code, I realized a great part of the problems in programming came down to mistakes in communication, ambiguities that weren’t properly removed, things being overly verbose, or problems in a similar vein. Most production level systems ran by competent teams don’t really have critical level bugs that are caused by a massive oversight in logics, or someone entirely missing the logical foundation for a problem. Processes like code reviews, thorough testing habits, and general good practices do a good job of curbing those. Yet the problems I found the most often were the ones that eluded code reviews, because people no longer paid attention to them; the ones that got through testing, because it wasn’t clear what the test was doing, and we thought that a condition was being tested when it wasn’t; or the ones that don’t trigger the alarms because people simply don’t notice them. &lt;/p&gt;
&lt;p&gt;Code must be readable. Not just to save the time of developers that come after and try to read it, but because if it isn’t, they won’t read it properly. And that will invariably lead to lost time, money, mental health, and generally a bunch of really avoidable problems.&lt;/p&gt;
&lt;p&gt;It’s generally not very controversial to say that code must be readable, and I’m glad that’s the case - even though executing on this principle is often harder than naming it. But I think we should go a step further, and say not just that code must be readable: it must be &lt;em&gt;engaging&lt;/em&gt;. People pay more attention to books they find interesting. People pay more attention to code they’re engaged by. If your code is readable, but not particularly engaging, you run the risk of people’s mind drifting, and them missing something important in your code. When I started coding after years of researching literature, I tried to apply several principles of how you make a good story to how I write my code - to generally good results.&lt;/p&gt;
&lt;p&gt;Think of the following code I wrote for one of my games to handle an enemy’s movement:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;func _process&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;delta&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; mobHealth &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		queue_free&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; stopMoving&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	startPosition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; position
	endPosition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; player&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;position
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;player&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;position&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
		$ProperAnimation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flip_h &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; true&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		$ProperAnimation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flip_h &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; false&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	_update_path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		var to_walk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; delta &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; speed
		&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; to_walk &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
			var pfrom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
			var pto &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
			var d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pfrom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;distance_to&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pto&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; to_walk&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
				path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;remove&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				to_walk &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; d
			&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
				path&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pfrom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;linear_interpolate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pto&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; to_walk&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				to_walk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
		
		var atpos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
		position &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; atpos
		
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
			path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you get into the actual logics of things, I bet you lost interest halfway through the function.&lt;/p&gt;
&lt;p&gt;But if you try and tell a story with it and do so by extracting the logic in order to not harm the story’s flow with a tangent, this is what you get:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;func _process&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;delta&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; mobHealth &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		queue_free&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; stopMoving&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	startPosition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; position
	endPosition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; player&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;position
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;player&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;position&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
		$ProperAnimation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flip_h &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; true&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		$ProperAnimation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flip_h &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; false&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	_update_path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	moveThroughPath&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

func moveThroughPath&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		var to_walk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; delta &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; speed
		&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; to_walk &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
			var pfrom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
			var pto &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
			var d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pfrom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;distance_to&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pto&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; to_walk&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
				path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;remove&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				to_walk &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; d
			&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
				path&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pfrom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;linear_interpolate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pto&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; to_walk&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				to_walk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
		
		var atpos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
		position &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; atpos
		
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
			path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This way you declutter the actual method that’s telling the story - and whoever’s invested in it enough to want to get into the nitty gritty, instead of just getting an idea of how the system works, can go to the secondary method ´moveThroughPath´ and find out. &lt;/p&gt;
&lt;p&gt;This isn’t revolutionary. Lots of very well established names in programming advocate for similar results through other names - for instance, Robert C. Martin’s &lt;em&gt;Clean Code&lt;/em&gt; argues in favor of a similar extraction on the basis that functions should have a single responsibility, and orchestration is already a responsibility. If you follow that rule, you generally get similar results. &lt;/p&gt;
&lt;p&gt;However, I haven’t often seen it formulated in terms of storytelling. Perhaps because it’s less useful to people that don’t have my background or a similar interest in stories. For me, it helps to think of code that way. You wouldn’t want a novel to suddenly stop the thread of the main intrigue in its path to tell you about how the main character’s sword was made. So why should code break the narrative flow in such a way? Thinking of code in this way has allowed me to translate a lot of my skills in other areas to the activity of writing code. Of course, there’s more that I use in my day to day - I have a deep understanding of complex logics which helps with the algorithmic aspects of code, and the communication and speech skills acquired by reading, presenting at conferences, etc have a real practical application in the software world, where you must and should still interact effectively with people. &lt;/p&gt;
&lt;h2&gt;Mission statement&lt;/h2&gt;
&lt;p&gt;After the above, the mission statement shouldn’t come as a surprise. I want to write good stories. I want to &lt;em&gt;tell&lt;/em&gt; good stories. Stories are fundamentally a way to connect with other people, and I believe code acts as a facilitator for precisely that. Good code lets people connect, be it by enabling thriving businesses or by letting developers separated by time, different backgrounds and different interests to read code they didn’t write, add to it, and build something together. &lt;/p&gt;
&lt;p&gt;That’s not to say I’ve forgotten stories themselves. As much as I love coding, I also like writing. And I want to connect with people in ways that are meaningful to me, and in ways that people have connected with me and impacted me before. That’s why I also write actual novels and short stories, and why I take an active interest in game development as a medium for telling stories. &lt;/p&gt;
&lt;p&gt;I’ll post about writing, software engineering, game development, and general life. This will function as my personal hub on the internet.&lt;/p&gt;
&lt;p&gt;Stories are my passion. You can explore mine in this website. I look forward to connecting with you! &lt;/p&gt;</content:encoded></item></channel></rss>